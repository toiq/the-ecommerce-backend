// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
  USER
}

model User {
  id        String           @id @default(cuid())
  name      String
  email     String           @unique
  password  String
  role      Role             @default(USER)
  profile   Profile?
  orders    Order[]
  payment   Payment_detail[]
  reviews   Reviews[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("users")
}

model Profile {
  id               String    @id @default(cuid())
  image            String?
  phone            String?
  addresses        Address[] @relation("allAddresses")
  defaultAddress   Address?  @relation("defaultAddress", fields: [defaultAddressId], references: [id])
  defaultAddressId String?   @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String    @unique

  wishlist  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("profiles")
}

model Address {
  id                      String   @id @default(cuid())
  district                String
  city                    String
  postCode                Int
  details                 String
  profile                 Profile  @relation("allAddresses", fields: [profileId], references: [id], onDelete: Cascade)
  profileId               String
  defaultAddressByProfile Profile? @relation("defaultAddress")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id       String    @id @default(cuid())
  image    String?
  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id    String  @id @default(cuid())
  name  String
  stock Int
  price Int
  image String?
  desc  String

  brand      Brand      @relation(fields: [brandId], references: [id])
  brandId    String
  categories Category[]

  orderDetail Order_detail[]

  avgRating Float?    @default(0)
  reviews   Reviews[]

  wishlistByProfile   Profile? @relation(fields: [wishlistByProfileId], references: [id], onDelete: Cascade)
  wishlistByProfileId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reviews {
  id      String  @id @default(cuid())
  comment String?
  rating  Int

  userId String
  user   User   @relation(fields: [userId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Order {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderDetail   Order_detail[]
  paymentDetail Payment_detail?
  trackOrder    Track_order?
  address       String
  total         Int
  time          DateTime        @default(now())
}

model Payment_detail {
  id       String   @id @default(cuid())
  amount   Int
  currency String
  time     DateTime @default(now())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  orderId  String   @unique
  order    Order    @relation(fields: [orderId], references: [id])
}

model Order_detail {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  subTotal  Int
  quantity  Int
  price     Int
}

model Track_order {
  id      String @id @default(cuid())
  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])
  address String
  status  Status @default(PREPARING)
}

enum Status {
  PREPARING
  SHIPPED
  DELIVERD
}
